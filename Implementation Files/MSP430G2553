/*
 * MSP430G2.c
 *
 *  Created on: Sep 18, 2018
 *      Author: colby
 */

#include <msp430.h> 

void Simpleblink() // Blinks one LED on and off
{
    P1SEL &= ~BIT0; // Set port 1, pin 0 as GPIO
    P1DIR |= BIT0; // configure P1.0 as an output


    volatile unsigned int i;        // volatile to prevent optimization

    P1OUT = 0; // Sets all output register bits to 0

    while(1) // loop continuously toggles LED
    {
        P1OUT ^= BIT0; // toggle P1.0
        for(i=10000; i>0; i--);  // delay
    }
}


void Multiblink()
{
    P1SEL &= (~BIT0 & ~BIT6); // Sets port pins P1.0 and P1.6 as GPIO
    P2SEL &= (~BIT1 & ~BIT3 & ~BIT5); // Sets port pins P2.1, P2.3, and P2.5 as GPIO

    P1DIR |= (BIT0 | BIT6); // configure P1.0 and P1.6 as output
    P2DIR |= (BIT1 | BIT3 | BIT5); // configure P2.1, P2.3, and P2.5 as output


    volatile unsigned int i;        // volatile to prevent optimization

    P1OUT = 0; // Sets all output register bits to 0
    P2OUT = 0; // Sets all output register bits to 0

    while(1)
    {
        P1OUT ^= (BIT0); // toggle P1.0
        for(i=10000; i>0; i--);     // delay

        P1OUT ^= (BIT0 | BIT6); // toggle P1.0

        for(i = 10000; i>0; i--); // delay again

        P1OUT ^= (BIT0 | BIT6); // toggle P1.0
        
        // Following conditionals toggle RGB LED from
        // Red to green to blue to white and back again
        
        // BIT1 controls the red LED
        // BIT3 controls the green LED
        // BIT5 controls the blue LED
        
               if(P2OUT == (BIT1 | BIT3 | BIT5))
                   P2OUT = 0;
               else if(P2OUT & BIT1) {
                   P2OUT &= ~BIT1;
                   P2OUT |= BIT3;
               }
               else if(P2OUT & BIT3){
                   P2OUT &= ~BIT3;
                   P2OUT |= BIT5;
               }
               else if(P2OUT & BIT5){
                   P2OUT |= BIT1 | BIT3;
               }
               else
                   P2OUT |= BIT1;
        for(i = 10000; i>0; i--); last delay before loop
    }
}

void Buttonpress()
{
    P1SEL &= (~BIT0 & ~BIT3);
    P1DIR |= BIT0; // configures P1.0 (LED0 as output
    P1DIR &= ~BIT3; // configure P1.3 (switch) as an input


    volatile unsigned int i;        // volatile to prevent optimization

    P1OUT = 0; // Sets all output register bits to 0
    P1REN |= BIT3;  // Enable Pullup/down Resistor for SW1
    P1OUT |= BIT3;  // Sets resistor as pull up

    while(1)
    {
    
    if(P1IN & BIT3) // LED cuts on with button press
        P1OUT |= BIT0;
    else
        P1OUT &= ~BIT0;

    }
}


